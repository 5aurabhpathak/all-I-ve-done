!function(){"use strict";function System($state,$scope,$rootScope,$http,systemService,$q,$timeout,systemData,firmwareService){function resetPasswordChangeForm(){vm.newUserObject.oldPassword=null,vm.newUserObject.newPassword=null,vm.newUserObject.confirmPassword=null,$scope.passwordChangeForm.$setUntouched()}function resetNotifications(){vm.systemCertificateErrorMsg=vm.systemCertificateSuccessMsg=vm.packageUploadErrorMsg=vm.packageUploadSuccessMsg=vm.systemSettingsError=vm.systemSettingsSuccess=null}var vm=this;vm.timeObject=systemData.time,vm.listOfUsers=systemData.users,vm.shellAccess=systemData.shellAccess,vm.wacName=systemData.wacName,vm.newUserObject={userName:vm.listOfUsers[0]},vm.currentTime=moment().format("MM/DD/YYYY h:mm:ss A z"),vm.currentTimeZone=(new Date).toLocaleTimeString("en-us",{timeZoneName:"short"}).split(" ")[2],console.log("Timezone abbr: "+vm.currentTimeZone),vm.version=systemData.version,vm.build=systemData.build,vm.currentTimeOnGateway=systemData.time,vm.formatError="WAC name must be composed of letters, numbers or dashes.",vm.ipAddressFormatValidation=/^\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}$/,vm.validation=/^[^\/|~<>;\\\\'\"]{1,20}$/,vm.validateWacName=/^[a-zA-Z0-9-]*$/,vm.disableRestore=!0,$rootScope.currentState=$state.current.name,vm.certificateStatus=systemData.customCertificate,vm.networkRestoreErrorMessage=null,vm.setTime=function(){resetNotifications();var tObj={time:moment().format("YYYY-MM-DDTHH:mm:ss"),timeZone:vm.currentTimeZone,useNtp:vm.timeObject.useNtp,ntpServers:vm.timeObject.ntpServers};systemService.setTimeFunction(tObj).then(function(response){vm.currentTimeOnGateway=response,null!=response?(vm.systemSettingsSuccess="SUCCESS! WAC time has been set",$rootScope.$broadcast("gatewayTimeUpdated")):vm.systemSettingsError="ERROR: Failed to set WAC time"},function(error){vm.systemSettingsError="ERROR: Failed to set WAC time"})},vm.setPassword=function(){resetNotifications(),vm.newUserObject.newPassword.length<=6?(console.log("Password is too short"),resetPasswordChangeForm(),window.alert("Password is too short. Please try again...")):vm.newUserObject.confirmPassword===vm.newUserObject.newPassword?systemService.setPassword(vm.newUserObject).then(function(success){vm.systemSettingsSuccess="SUCCESS! Password changed"},function(error){vm.systemSettingsError="ERROR: Failed to change password due to invalid credentials"}):(console.log("Passwords do not match. "),resetPasswordChangeForm(),window.alert("Passwords do not match. Please re-enter."))},vm.setWACName=function(){resetNotifications(),systemService.setWACName({newWACName:vm.wacName}).then(function(success){vm.systemSettingsSuccess="SUCCESS! WAC has been renamed to '"+vm.wacName+"'"},function(error){vm.systemSettingsError="ERROR: Failed to change WAC name"})},vm.sshEnableDisable=function(){resetNotifications();var enableDisableMessage=vm.shellAccess?"enable":"disable";systemService.sshEnableDisabling({shellAccess:vm.shellAccess}).then(function(response){null!=response&&response.shellAccess==vm.shellAccess?vm.systemSettingsSuccess="SUCCESS! SSH "+enableDisableMessage+"d":vm.systemSettingsError="ERROR: Failed to "+enableDisableMessage+" SSH",vm.shellAccess=null!=response&&null!=response.shellAccess?response.shellAccess:vm.shellAccess},function(error){vm.systemSettingsError="ERROR: Failed to "+enableDisableMessage+" SSH",vm.shellAccess=!vm.shellAccess})},vm.clearCustomCertificate=function(){resetNotifications();var customCertificate={enabled:!1};systemService.clearCustomCertificate(customCertificate).then(function(response){vm.certificateStatus=response.customCertificate,vm.systemCertificateSuccessMsg="SUCCESS! Custom certificate cleared"},function(error){vm.systemCertificateErrorMsg="ERROR: Failed to clear the custom certificate"})},vm.uploadCertificate=function(){resetNotifications();firmwareService.uploadFile(vm.certificateFile,!1).then(function(response){vm.systemCertificateSuccessMsg='SUCCESS! Custom certificate "{0}" was successfully enabled.'.format(vm.certificateFile.name),vm.certificateStatus=response.customCertificate},function(error){vm.systemCertificateErrorMsg='ERROR! Could not upload "{0}".'.format(vm.certificateFile.name)})},vm.validateCertificateName=function(fileName){return new RegExp("(.*?).(pem)$").test(fileName)},vm.certificatePackageUploadBrowse=function(){setTimeout(function(){angular.element("#certificatePackageUploadBrowse").trigger("click")},0)},vm.getBackupFile=function(){resetNotifications(),systemService.getBackupFile()},vm.uploadBackupFile=function(){resetNotifications(),firmwareService.uploadFile(vm.uploadFileName).then(function(response){vm.restoreInformation=response.updateInfo,vm.packageUploadSuccessMsg='SUCCESS! "{0}" was successfully uploaded.'.format(vm.uploadFileName.name),response.restoreAvailable&&(vm.disableRestore=!1)},function(error){vm.packageUploadErrorMsg='ERROR! Could not upload "{0}".'.format(vm.uploadFileName.name)})},vm.restoreFromBackupFile=function(){resetNotifications();var startWacRestore={startWacRestore:!0};systemService.restoreFromBackupFile(startWacRestore).then(function(response){console.log("system.js::restoreFromBackupFile::response",response),response.networkRestore&&(vm.networkRestoreErrorMessage=response.networkRestore)})},vm.validateBackupUpdateName=function(fileName){return new RegExp("(.*?).(tgz)|(enc)$").test(fileName)},vm.packageUploadBrowse=function(){setTimeout(function(){angular.element("#packageUploadBrowse").trigger("click")},0)}}angular.module("app.system").controller("System",System),System.$inject=["$state","$scope","$rootScope","$http","systemService","$q","$timeout","systemData","firmwareService"]}();