!function(){"use strict";function WebService($http,$cookies,$rootScope,$timeout,$state,userService,utilities,requestMap,$q,$location,spinnerService,$modal,$window){function sendWSRequest(o){spinnerService.show();var serviceCall,deferred=$q.defer();if(!o.methodName)return console.log("You must pass 'methodName' to createWSPromise"),deferred.reject(),deferred.promise;var requestObject=packageWebServiceObject(o);return requestObjectURL=requestObject.url,console.log("webService.sendWSRequest() - requestObject: ",requestObject),serviceCall=$http(requestObject),clearTimer(),updateTimer(),serviceCall.success(function(response,status,headers,responseConfig){if(console.log("webService::success() - Response for '{0}': ".format(o.methodName),response),response.token&&sessionStorage.setItem("webpageToken",response.token),response.downloadLink){var url=requestObjectURL+"/"+response.downloadLink;$window.open(url)}spinnerService.hide(),deferred.resolve(response)}),serviceCall.error(function(error,status){if(console.log("webService::error() - Request for '{0}': ".format(o.methodName),requestObject),console.log("webService::error() - Response for '{0}': ".format(o.methodName),error),_.isNull(error))spinnerService.hide(),sessionStorage.clear(),$state.go("login");else{"erroraccessdenied"==error.message.replace(/[^a-zA-Z ]/g,"").replace(/ /g,"").toLowerCase()&&(spinnerService.hide(),sessionStorage.clear(),$state.go("login"))}spinnerService.hide(),deferred.reject(error)}),deferred.promise}function packageWebServiceObject(o){void 0===o.methodName&&console.log("You must pass a method name to webServices.getData",o),angular.extend(o,requestMap.get(o.methodName)),o.urlParameters&&(o.path=o.interpolateFunc(o.urlParameters)),o.url="{0}{1}:{2}/{3}{4}".format($rootScope.PROTOCOL,$rootScope.IPADDRESS,$rootScope.PORT,$rootScope.VERSION,o.path);var request={method:o.requestType,url:o.url};return request.headers={Accept:"application/json","Content-Type":"application/json"},null!=sessionStorage.getItem("webpageToken")&&(request.headers.token=sessionStorage.getItem("webpageToken")),null!=o.data&&(request.data=o.data),request}function reAuthenticate(){modalInstance.close(),sessionStorage.clear(),stopTimer(),$state.go("login")}function stopTimer(){timerEnabled=!1,null!=logoutTimer&&$timeout.cancel(logoutTimer)}function clearTimer(){timerEnabled=!0,counter=0,null!=logoutTimer&&$timeout.cancel(logoutTimer)}function updateTimer(){console.log("updatetimer called"),logoutTimer=$timeout(function(){if((counter=timerEnabled?counter+1:0)>=1){var tmpScope=$rootScope.$new();tmpScope.reAuthenticate=reAuthenticate,sessionStorage.clear(),modalInstance=$modal.open({templateUrl:"app/layout/sessionTimeoutPopup.html",scope:tmpScope,backdrop:"static",keyboard:!1}),stopTimer()}},18e5)}$rootScope.IPADDRESS=$location.host(),$rootScope.PORT=$location.port(),$rootScope.VERSION="config/v1",$rootScope.PROTOCOL=$location.protocol()+"://",$rootScope.TIMEOUT=5e3;var modalInstance,timerEnabled,requestObjectURL,counter=0,logoutTimer=null,services={sendWSRequest:sendWSRequest,clearTimer:clearTimer,updateTimer:updateTimer,stopTimer:stopTimer,reAuthenticate:reAuthenticate};return $rootScope.$on("$locationChangeSuccess",function(event,newUrl,oldUrl){console.log("Layout::$locationChangeSuccess()"),modalInstance&&modalInstance.close()}),services}angular.module("app.services").factory("webService",WebService),WebService.$inject=["$http","$cookies","$rootScope","$timeout","$state","userService","utilities","requestMap","$q","$location","spinnerService","$modal","$window"]}();